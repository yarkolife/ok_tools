# Generated by Django 5.2.5 on 2025-10-12 00:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('licenses', '0007_update_empty_tags_to_none'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Display name for this storage location', max_length=255, verbose_name='Name')),
                ('storage_type', models.CharField(choices=[('ARCHIVE', 'Archive'), ('PLAYOUT', 'Playout'), ('CUSTOM', 'Custom')], default='CUSTOM', max_length=20, verbose_name='Storage Type')),
                ('path', models.CharField(help_text='Absolute path to the storage directory (e.g., /mnt/archive/)', max_length=500, verbose_name='Path')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this storage location is currently active', verbose_name='Active')),
                ('scan_enabled', models.BooleanField(default=False, help_text='Enable automatic scanning of this location', verbose_name='Scan Enabled')),
                ('scan_schedule', models.CharField(blank=True, help_text='Cron-style schedule for automatic scanning (optional)', max_length=255, verbose_name='Scan Schedule')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Storage Location',
                'verbose_name_plural': 'Storage Locations',
                'ordering': ['storage_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VideoFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(db_index=True, help_text='Unique identification number matching License number', unique=True, verbose_name='Number')),
                ('filename', models.CharField(max_length=500, verbose_name='Filename')),
                ('file_path', models.CharField(help_text='Relative path within the storage location', max_length=1000, verbose_name='File Path')),
                ('file_size', models.BigIntegerField(blank=True, null=True, verbose_name='File Size (bytes)')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Duration')),
                ('format', models.CharField(blank=True, help_text='Container format (mp4, mov, mxf, etc.)', max_length=50, verbose_name='Format')),
                ('is_available', models.BooleanField(default=True, help_text='Whether the file is physically accessible', verbose_name='Available')),
                ('last_scanned', models.DateTimeField(blank=True, null=True, verbose_name='Last Scanned')),
                ('last_modified', models.DateTimeField(blank=True, null=True, verbose_name='Last Modified')),
                ('checksum', models.CharField(blank=True, max_length=64, verbose_name='Checksum (SHA256)')),
                ('video_codec', models.CharField(blank=True, max_length=50, verbose_name='Video Codec')),
                ('video_codec_long', models.CharField(blank=True, max_length=255, verbose_name='Video Codec (Long)')),
                ('video_profile', models.CharField(blank=True, max_length=100, verbose_name='Video Profile')),
                ('video_bitrate', models.BigIntegerField(blank=True, null=True, verbose_name='Video Bitrate (bps)')),
                ('video_bitrate_mode', models.CharField(blank=True, max_length=10, verbose_name='Bitrate Mode')),
                ('fps', models.FloatField(blank=True, null=True, verbose_name='FPS')),
                ('width', models.IntegerField(blank=True, null=True, verbose_name='Width')),
                ('height', models.IntegerField(blank=True, null=True, verbose_name='Height')),
                ('aspect_ratio', models.CharField(blank=True, max_length=20, verbose_name='Aspect Ratio')),
                ('pixel_format', models.CharField(blank=True, max_length=50, verbose_name='Pixel Format')),
                ('color_space', models.CharField(blank=True, max_length=50, verbose_name='Color Space')),
                ('color_range', models.CharField(blank=True, max_length=20, verbose_name='Color Range')),
                ('chroma_subsampling', models.CharField(blank=True, max_length=20, verbose_name='Chroma Subsampling')),
                ('audio_codec', models.CharField(blank=True, max_length=50, verbose_name='Audio Codec')),
                ('audio_codec_long', models.CharField(blank=True, max_length=255, verbose_name='Audio Codec (Long)')),
                ('audio_bitrate', models.BigIntegerField(blank=True, null=True, verbose_name='Audio Bitrate (bps)')),
                ('audio_sample_rate', models.IntegerField(blank=True, null=True, verbose_name='Audio Sample Rate (Hz)')),
                ('audio_channels', models.IntegerField(blank=True, null=True, verbose_name='Audio Channels')),
                ('audio_channel_layout', models.CharField(blank=True, max_length=50, verbose_name='Audio Channel Layout')),
                ('has_video', models.BooleanField(default=True, verbose_name='Has Video')),
                ('has_audio', models.BooleanField(default=True, verbose_name='Has Audio')),
                ('total_bitrate', models.BigIntegerField(blank=True, null=True, verbose_name='Total Bitrate (bps)')),
                ('metadata_json', models.JSONField(blank=True, help_text='Complete ffprobe output for extensibility', null=True, verbose_name='Full Metadata (JSON)')),
                ('thumbnail', models.CharField(blank=True, help_text='Path to preview image', max_length=500, verbose_name='Thumbnail Path')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('license', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_file', to='licenses.license', verbose_name='License')),
                ('storage_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='media_files.storagelocation', verbose_name='Storage Location')),
            ],
            options={
                'verbose_name': 'Video File',
                'verbose_name_plural': 'Video Files',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FileOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_type', models.CharField(choices=[('SCAN', 'Scan'), ('COPY', 'Copy'), ('MOVE', 'Move'), ('DELETE', 'Delete'), ('METADATA_UPDATE', 'Metadata Update'), ('VERIFY', 'Verify Integrity')], max_length=20, verbose_name='Operation Type')),
                ('performed_at', models.DateTimeField(auto_now_add=True, verbose_name='Performed At')),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('IN_PROGRESS', 'In Progress')], default='IN_PROGRESS', max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('details', models.JSONField(blank=True, help_text='Additional operation details', null=True, verbose_name='Details')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
                ('destination_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='destination_operations', to='media_files.storagelocation', verbose_name='Destination Location')),
                ('source_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_operations', to='media_files.storagelocation', verbose_name='Source Location')),
                ('video_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='media_files.videofile', verbose_name='Video File')),
            ],
            options={
                'verbose_name': 'File Operation',
                'verbose_name_plural': 'File Operations',
                'ordering': ['-performed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='videofile',
            index=models.Index(fields=['number'], name='media_files_number_fbacc4_idx'),
        ),
        migrations.AddIndex(
            model_name='videofile',
            index=models.Index(fields=['storage_location', 'is_available'], name='media_files_storage_b55e7c_idx'),
        ),
    ]
